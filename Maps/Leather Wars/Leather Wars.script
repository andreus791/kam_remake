type
  aFail = (fNone, fTowerSpam, fCheat, fLostHouses);


var
  Fail: aFail;


procedure OnMissionStart;
begin
  Fail := fNone;
end;


procedure AutoFeed;
var
  I, K: Integer;
  UnitsToFeed: array of Integer;
begin
  for I := 1 to 5 do
    if States.PlayerEnabled(I) then
    begin
      UnitsToFeed := States.PlayerGetAllUnits(I);
      for K := 0 to Length(UnitsToFeed) - 1 do
        Actions.UnitHungerSet(UnitsToFeed[K], States.UnitMaxHunger);
    end;
end;


function FailText: ANSIString;
begin
  case Fail of
    fNone: Result := '';
    fTowerSpam: Result := '[$3515EF]<$0>[]';
    fCheat: Result := '[$201AEE]<$1>[]';
    fLostHouses: Result := '[$3A55BE]<$2>[]'
    else Result := '';
  end;
end;


procedure OnTick;
begin
  if States.GameTime mod 6000 = 0 then
    AutoFeed;

  if States.StatResourceProducedMultipleTypesCount(0, [3, 6, 17, 19, 21, 23, 25]) > 0 then
    Fail := fCheat;

  if Fail <> fNone then
    Actions.PlayerDefeat(0);

  Actions.OverlayTextSet(-1, FailText);

end;


procedure OnHouseBuilt(aHouseID: Integer);
begin
  if States.StatHouseTypeCount(0, 7) > 12 then
    Fail := fTowerSpam;
end;


procedure OnHouseDestroyed(aHouseID, aDestroyer: Integer);
begin
  if States.StatHouseMultipleTypesCount(0, [11, 13, 21]) = 0 then
    Fail := fLostHouses;
end;